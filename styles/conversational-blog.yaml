# WriteIt Style Primer: Conversational Blog
# 
# Friendly, engaging blog writing that feels like talking to a knowledgeable 
# friend. Perfect for personal blogs, startup content, newsletters, and 
# community-focused writing.
#
# Best for: Personal blogs, startup content, newsletters, tutorials,
#           community posts, thought leadership pieces
# 
# Target Audience: General tech-savvy readers, fellow developers, startup community

metadata:
  name: "Conversational Blog"
  description: "Friendly, engaging writing that connects with readers personally"
  version: "1.0.0"
  author: "WriteIt Team"
  category: "informal"
  difficulty: "intermediate"
  use_cases: 
    - "Personal blog posts"
    - "Startup blog content"
    - "Newsletter articles"
    - "Tutorial and how-to guides"
    - "Developer community posts"
    - "Thought leadership pieces"

# Core voice and personality
voice:
  personality: "Friendly expert, approachable mentor, authentic storyteller"
  tone: "Conversational, enthusiastic, relatable, honest"
  perspective: "Experienced practitioner sharing lessons learned"
  
  characteristics:
    - "Speaks directly to the reader (uses 'you' frequently)"
    - "Shares personal experiences and failures"
    - "Uses analogies and metaphors to explain concepts"
    - "Admits uncertainty and learning moments"
    - "Shows personality and humor appropriately"
    - "Builds community and connection"
    - "Encourages reader engagement and discussion"

# Language and word choices
language:
  formality: "Casual but professional, like talking to a colleague"
  
  conversational_elements:
    - "Use contractions (we're, don't, it's, you'll)"
    - "Start sentences with 'And', 'But', 'So' occasionally"
    - "Ask rhetorical questions to engage readers"
    - "Use parenthetical asides (like this one!)"
    - "Include casual interjections (honestly, actually, basically)"
  
  preferred_phrases:
    - "Here's the thing..." instead of "The issue is..."
    - "Let me show you..." instead of "This demonstrates..."
    - "You know what I mean?" instead of "This is evident..."
    - "I learned the hard way..." instead of "Experience shows..."
    - "Trust me on this..." instead of "It is recommended..."
    - "Here's what worked for me..." instead of "The solution is..."
  
  storytelling_elements:
    - "I remember when..."
    - "Picture this scenario..."
    - "Let me tell you about a time when..."
    - "We've all been there..."
    - "Sound familiar?"
    - "Here's what happened next..."
  
  avoid:
    - Overly formal business language
    - Academic jargon without explanation
    - Corporate speak ("leverage", "synergy", "paradigm")
    - Pretentious vocabulary when simple words work
    - Technical terms without context for general readers

# Content structure patterns
structure:
  opening:
    pattern: "Hook → Personal Connection → What's In It For Them"
    styles:
      story_hook: |
        "Start with a personal anecdote or relatable scenario"
      problem_hook: |
        "Begin with a frustrating problem readers will recognize"
      question_hook: |
        "Open with an intriguing question that makes readers think"
    
    example: |
      "I spent three hours debugging a React component last Tuesday. Three. Hours.
      The bug? A missing dependency in a useEffect hook that I'd written hundreds
      of times before. As I sat there feeling like a complete impostor, it hit me:
      we're all just making it up as we go along, and that's actually okay.
      
      If you've ever felt like everyone else has their code figured out while
      you're secretly googling 'how to center a div' for the thousandth time,
      this post is for you. Let's talk about impostor syndrome in tech and why
      it might actually be a feature, not a bug."
  
  body_sections:
    organization: "Conversational flow, like explaining to a friend"
    section_length: "300-500 words - bite-sized for easy reading"
    
    techniques:
      personal_examples: |
        "Share real experiences, failures, and lessons learned"
      analogies: |
        "Compare technical concepts to everyday experiences"
      step_by_step: |
        "Break down complex processes into simple steps"
      asides: |
        "Include relevant tangents and personal observations"
  
  conclusion:
    pattern: "Summary → Call to Action → Community Building"
    elements:
      - "Recap key insights in your own words"
      - "Invite discussion and engagement"
      - "Ask readers to share their experiences"
      - "Suggest next steps or related topics"
      - "End with encouragement or inspiration"

# Storytelling and narrative
storytelling:
  personal_anecdotes:
    purpose: "Build connection and illustrate points with real experience"
    structure: "Context → Challenge → Resolution → Lesson"
    guidelines:
      - "Keep stories relevant to the main topic"
      - "Don't make yourself the hero of every story"
      - "Include failures and mistakes openly"
      - "Show vulnerability and learning moments"
  
  analogies_and_metaphors:
    guidelines:
      - "Use familiar, everyday comparisons"
      - "Make complex technical concepts relatable"
      - "Don't overextend metaphors beyond their usefulness"
      - "Choose analogies that resonate with your audience"
    
    examples:
      - "APIs are like restaurant menus - they tell you what's available"
      - "Git branches are like parallel universes for your code"
      - "Database indexes are like phone book alphabetization"
      - "Microservices are like having a food court instead of one big restaurant"

# Reader engagement techniques  
engagement:
  direct_address:
    - "You've probably experienced this..."
    - "Let me ask you something..."
    - "Think about your last project..."
    - "Here's what I want you to try..."
  
  questions:
    rhetorical: "Ever wonder why we do it this way?"
    engaging: "What would you do in this situation?"
    reflective: "How many times have you seen this pattern?"
    
  community_building:
    - "We're all figuring this out together"
    - "The community has been incredibly helpful with this"
    - "I'd love to hear your thoughts on..."
    - "Drop a comment if you've experienced..."

# Humor and personality
humor:
  appropriate_use:
    - "Self-deprecating humor about your own mistakes"
    - "Gentle teasing about common developer habits"
    - "Playful observations about tech culture"
    - "Lighthearted analogies and comparisons"
  
  avoid:
    - "Humor at others' expense"
    - "Inside jokes that exclude readers"
    - "Controversial or political humor"
    - "Humor that undermines the main message"
  
  examples:
    - "I have a PhD in Stack Overflow copy-paste debugging"
    - "My code works, but I'm not sure why - and I'm afraid to touch it"
    - "I name my variables like I'm writing poetry... bad poetry"

# Technical content delivery
technical_approach:
  complexity_management:
    - "Start with the big picture, then dive into details"
    - "Explain the 'why' before the 'how'"
    - "Use progressive disclosure - simple first, then complex"
    - "Provide multiple ways to understand the same concept"
  
  code_examples:
    style: "Practical, realistic examples with context"
    presentation:
      - "Introduce code with plain English explanation"
      - "Walk through examples line by line when helpful"
      - "Show both working code and common mistakes"
      - "Include comments that sound conversational"
    
    example: |
      ```javascript
      // Here's the hook that caused me all that trouble
      // (I promise there's a point to this suffering)
      useEffect(() => {
        fetchUserData(); // This looks innocent enough, right?
      }); // Spoiler alert: missing dependency array = infinite loop
      
      // What I should have written:
      useEffect(() => {
        fetchUserData();
      }, []); // The empty array says "only run this once"
      
      // Or even better, if fetchUserData depends on something:
      useEffect(() => {
        fetchUserData(userId);
      }, [userId]); // Now it re-runs when userId changes
      ```

# Formatting for readability
formatting:
  paragraph_length: "2-4 sentences max - people scan, not read"
  
  visual_breaks:
    - "Use subheadings every 200-300 words"
    - "Include bullet points for lists and key concepts"
    - "Add code blocks for technical examples"
    - "Use blockquotes for important insights or quotes"
    - "Include images, GIFs, or diagrams when helpful"
  
  emphasis:
    - "Bold for key concepts and important points"
    - "Italics for emphasis and new terminology"  
    - "Code formatting for technical terms and examples"
    - "Avoid all caps (seems shouty)"
  
  lists:
    - "Use numbered lists for processes and steps"
    - "Use bullet points for features and benefits"
    - "Keep list items parallel in structure"
    - "Add brief explanations for complex items"

# Audience considerations
audience:
  assumptions:
    - "General tech literacy (understands basic concepts)"
    - "Curious and willing to learn"
    - "Appreciates honesty about challenges"
    - "Wants practical, actionable information"
    - "Values community and shared experiences"
  
  inclusive_language:
    - "Avoid assuming everyone has the same background"
    - "Explain acronyms and technical terms"
    - "Don't assume familiarity with specific tools or frameworks"
    - "Include context for company-specific or niche references"
  
  encouragement:
    - "Normalize struggle and learning curves"
    - "Celebrate small wins and progress"
    - "Remind readers that everyone was a beginner once"
    - "Share resources for continued learning"

# Examples of excellent conversational blog writing
examples:
  engaging_opening: |
    "I thought I knew CSS. I mean, I've been writing it for eight years, built
    dozens of websites, and can center a div in my sleep (okay, maybe not in my
    sleep, but definitely after my second coffee). Then last week, CSS Grid
    made me feel like I was seeing the web for the first time.
    
    You know that feeling when something clicks and suddenly everything makes
    sense? That's what happened when I finally - and I mean *finally* - wrapped
    my head around Grid. So grab your coffee, and let me show you the three
    concepts that changed how I think about layout forever."

  good_explanation_with_analogy: |
    "Think of React hooks like having a Swiss Army knife instead of carrying
    around a full toolbox. Before hooks, class components were like lugging
    around this heavy toolbox everywhere - you had all these lifecycle methods
    and state management tools, but most of the time you only needed one or two
    of them.
    
    Hooks let you pull out just the tools you need for each component. Need
    some state? Grab useState. Need to fetch data when the component loads?
    useEffect has got you covered. Want to share logic between components?
    That's what custom hooks are for."

  personal_story_with_lesson: |
    "I'll never forget my first production deployment. Picture this: junior
    developer, 6 PM on a Friday, convinced I could 'just quickly' push a small
    CSS fix. What could go wrong, right?
    
    Everything. Everything could go wrong.
    
    Twenty minutes later, the entire homepage was broken. Images weren't loading,
    the layout looked like a Jackson Pollock painting, and my phone was buzzing
    with Slack notifications. I learned three valuable lessons that night:
    
    1. Never deploy on Friday (seriously, just don't)
    2. Test everything, even 'small' changes
    3. Always have a rollback plan
    
    But here's the thing - everyone has a story like this. The difference between
    junior and senior developers isn't that seniors never break things. It's that
    they've broken enough things to know how to fix them quickly."

# Anti-patterns to avoid
anti_patterns:
  voice:
    - "Being overly casual to the point of unprofessionalism"
    - "Using slang or references that quickly become dated"
    - "Trying too hard to be funny or relatable"
    - "Being condescending or talking down to readers"
  
  structure:
    - "Burying the main point in too much backstory"
    - "Writing walls of text without visual breaks"
    - "Not delivering on promises made in the introduction"
    - "Ending abruptly without clear takeaways"
  
  content:
    - "Oversharing personal details irrelevant to the topic"
    - "Making assumptions about readers' experiences"
    - "Using humor that could alienate parts of your audience"
    - "Being overly self-promotional or salesy"

# Integration with WriteIt
integration:
  pipeline_usage:
    - "Perfect for blog-post.yaml pipeline template"
    - "Works well with mixed technical depth"
    - "Ideal for tutorial and how-to content"
    - "Great for personal experience sharing"
  
  prompt_modifications:
    - "Emphasize personal experience and storytelling"
    - "Request analogies and metaphors for complex concepts"
    - "Ask for conversational, approachable language"
    - "Include calls for reader engagement"
  
  quality_indicators:
    - "Sounds like natural conversation"
    - "Includes personal anecdotes and experiences"
    - "Uses metaphors that clarify rather than confuse"
    - "Ends with clear value and engagement opportunity"
    - "Maintains professional credibility while being approachable"